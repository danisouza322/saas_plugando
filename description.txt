# SAAS Plugando - Documentação do Projeto

## Stack Tecnológica
- Laravel 11.0
- PHP 8.2+
- Livewire 3.5 (Para componentes dinâmicos)
- Theme Velzon (Template Admin)
- Bootstrap 5
- MySQL/MariaDB
- SweetAlert2 (Para notificações)
- Select2 (Para selects avançados)

## Estrutura do Projeto

### Autenticação e Autorização
- Sistema multi-tenant com empresas
- Autenticação usando Laravel Auth
- Sistema de roles e permissions
- Roles principais: super-admin, admin, user

### Módulos Principais

1. Dashboard
   - Visão geral do sistema
   - Estatísticas e métricas principais

2. Gestão de Empresas
   - Cadastro e edição de empresas
   - Campos principais:
     * Nome
     * Razão Social
     * CNPJ
     * Email
     * Telefone
     * Endereço completo
     * Status (ativo/inativo)

3. Gestão de Clientes
   - CRUD completo de clientes
   - Vinculação com empresa
   - Campos principais:
     * Dados pessoais
     * Documentos
     * Endereço
     * Atividades econômicas

4. Gestão de Certificados
   - Gerenciamento de certificados digitais
   - Vinculação com clientes

5. Gestão de Tarefas
   - CRUD completo de tarefas
   - Vinculação com clientes e responsáveis
   - Upload e gerenciamento de arquivos
   - Sistema de notificações
   - Campos principais:
     * Título
     * Descrição
     * Cliente
     * Responsáveis
     * Status
     * Arquivos anexos
   - Funcionalidades:
     * Criação/edição via modal
     * Exclusão com confirmação
     * Upload de múltiplos arquivos
     * Notificações em tempo real
     * Filtros de busca

6. Área Administrativa
   - Gerenciamento de usuários
   - Configurações do sistema
   - Disponível apenas para super-admin

## Funcionalidades Removidas
- Sistema de planos e assinaturas
- Sistema de cobranças
- Integração com Asaas
- Webhooks de pagamento

## Diretórios Principais
- /app/Http/Livewire - Componentes Livewire
- /app/Models - Modelos do sistema
- /resources/views - Views Blade
- /database/migrations - Migrações do banco
- /routes - Rotas do sistema
- /public/build/js - Scripts JavaScript personalizados

## Rotas Principais
- /painel/dashboard - Dashboard principal
- /painel/clientes - Gestão de clientes
- /painel/certificados - Gestão de certificados
- /painel/tarefas - Gestão de tarefas
- /painel/gerencial/* - Área administrativa

## Banco de Dados
### Tabelas Principais
- users
- empresas
- clientes
- certificados
- tarefas
- tarefa_arquivos
- roles
- permissions

## Customizações
- Interface traduzida para português
- Theme Velzon customizado
- Sidebar simplificada
- Sistema de navegação intuitivo
- Notificações personalizadas com SweetAlert2
- Selects avançados com Select2

## Implementações Recentes
1. Módulo de Tarefas
   - Componente Livewire para listagem (Index.php)
   - Componente modal para criação/edição
   - Sistema de upload de arquivos
   - Integração com SweetAlert2 para notificações
   - Correção de bugs no sistema de exclusão
   - Melhorias na UX com confirmações e feedback
   - Logging detalhado para debugging

## GUIA PARA CRIAÇÃO DE MODAIS NO SISTEMA

1. ESTRUTURA DE ARQUIVOS
-----------------------
- Component PHP: app/Livewire/[Módulo]/[Nome]Modal.php
- View Blade: resources/views/livewire/[módulo]/[nome]-modal.blade.php
- JavaScript: public/build/js/[módulo].js (se necessário)

2. COMPONENT PHP
---------------
```php
namespace App\Livewire\[Módulo];

use Livewire\Component;

class [Nome]Modal extends Component
{
    // Propriedades públicas para bind com o form
    public $item = null;
    
    // Definir listener para o evento de abertura
    protected $listeners = ['open[Nome]Modal' => 'showModal'];
    
    // Método para resetar o form
    private function resetForm()
    {
        $this->item = null;
    }
    
    // Método chamado pelo evento
    public function showModal($data = null)
    {
        $this->resetForm();
        if (isset($data['item_id'])) {
            $this->loadItem($data['item_id']);
        }
    }
    
    public function render()
    {
        return view('livewire.[módulo].[nome]-modal');
    }
}
```

3. VIEW BLADE
------------
```html
<div>
    <div wire:ignore.self class="modal fade" id="[nome]Modal" 
         tabindex="-1" aria-labelledby="[nome]ModalLabel" 
         aria-hidden="true" data-bs-backdrop="static">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="[nome]ModalLabel">
                        Título do Modal
                    </h5>
                    <button type="button" class="btn-close" 
                            data-bs-dismiss="modal" aria-label="Close">
                    </button>
                </div>
                <div class="modal-body">
                    <!-- Conteúdo do Modal -->
                </div>
            </div>
        </div>
    </div>
</div>
```

4. JAVASCRIPT (app.blade.php)
---------------------------
```javascript
// Inicialização do Modal
Livewire.on('open[Nome]Modal', () => {
    const modalEl = document.getElementById('[nome]Modal');
    if (modalEl) {
        const modal = new bootstrap.Modal(modalEl);
        modal.show();
    }
});
```

5. REGISTRAR COMPONENTE
----------------------
Em AppServiceProvider.php:
```php
public function boot(): void
{
    Livewire::component('[módulo].[nome]-modal', \App\Livewire\[Módulo]\[Nome]Modal::class);
}
```

6. CHAMANDO O MODAL
------------------
No componente que vai abrir o modal:
```php
public function show[Nome]($item_id)
{
    $this->dispatch('open[Nome]Modal', ['item_id' => $item_id]);
}
```

7. BOAS PRÁTICAS
---------------
- Use wire:ignore.self no modal para evitar re-renderização
- Sempre resete o form ao abrir o modal
- Use data-bs-backdrop="static" para controle do modal
- Evite usar .to() no dispatch do evento
- Mantenha a lógica de negócios no componente PHP
- Use logs para debug quando necessário
- Trate erros adequadamente
- Valide inputs antes de salvar

8. TROUBLESHOOTING
-----------------
- Se o modal não abre: Verifique se o evento está sendo disparado e capturado
- Se há dupla atualização: Remova .to() do dispatch
- Se o modal fecha inesperadamente: Adicione data-bs-backdrop="static"
- Se o form não reseta: Verifique o método resetForm()
- Se há erros de JavaScript: Verifique o console do navegador

## Próximos Passos Sugeridos
1. Implementar testes automatizados
2. Melhorar documentação do código
3. Implementar sistema de logs avançado
4. Adicionar mais validações de dados
5. Melhorar UX/UI do sistema
6. Implementar sistema de busca avançada
7. Adicionar filtros adicionais nas listagens
8. Implementar sistema de exportação de dados

## Observações
- Sistema em desenvolvimento ativo
- Foco em simplicidade e usabilidade
- Remoção bem-sucedida do sistema de pagamentos
- Preparado para futuras expansões
- Logging implementado para debugging
- Tratamento de erros robusto